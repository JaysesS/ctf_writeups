import Crypto.Util.number
import math
import random


def generate_rsa_public_key():
    p = Crypto.Util.number.getPrime(1024)
    q = Crypto.Util.number.getPrime(1024)
    n = p * q
    e = Crypto.Util.number.getPrime(random.randint(2, 512))
    return n, e


def encrypt_rsa(c, n, e):
    return (c * e) % n


n, e = generate_rsa_public_key()

with open("flag.txt", "r") as f:
    flag = f.read()

message = Crypto.Util.number.bytes_to_long(flag.encode())

print("n =", n)
print("e =", e)
print("encrypted =", encrypt_rsa(message, n, e))

# n = 20948329589231429237597622363467712843845504882046532694238870936036651001186301672751108648725302487115592974634014734802435400962561743536818004602336180028722428023211364447587673624299166178135838423186685091605630065581668625026302160487730862949007801002726067889574553508683735351219092468842513706829899081100053794864883134331204702905837759476401304152102656561647156326355343723972287535332172103539991106279335767008032073360242171128677158827014464697642137821060501429437512329640450045880565614090552229475901588118099884395238175588895851034974275185154707992809255141075684627519171615937335448887231
# e = 5494363542226408827767514888346801615320841283374812950421471915989703990180553
# encrypted = 18801340202322932506809029673446479741527648479421899074473228506033057962733070780142243749834091300760249390468458093816815197849040880019862008211615936344282